// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

/// @seed="npm run db:seed"

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for students, teachers, and admins
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String @default("STUDENT")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments Enrollment[]
  courses     Course[]      // For teachers
  courseGrades CourseGrade[]
  assignmentGrades AssignmentGrade[]
  submissions Submission[]

  @@map("users")
}

// Course model
model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  code        String   @unique // Course code like "CS101"
  credits     Int      @default(3)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacherId String
  teacher   User         @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[]
  modules   Module[]
  courseGrades CourseGrade[]
  assignmentGrades AssignmentGrade[]
  assignments Assignment[]

  @@map("courses")
}

// Module model for course content
model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      // To maintain module sequence
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courseId String
  course   Course      @relation(fields: [courseId], references: [id])
  lessons  Lesson[]
  assignments Assignment[]

  @@map("modules")
}

// Lesson model for individual lessons within modules
model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String   // Lesson content (could be text, HTML, etc.)
  order       Int      // To maintain lesson sequence within module
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id])

  @@map("lessons")
}

// Enrollment model to track student-course relationships
model Enrollment {
  id        String   @id @default(cuid())
  enrolledAt DateTime @default(now())
  status    String @default("ACTIVE")
  grade     String?  // Letter grade like "A", "B", "C"

  // Relations
  studentId String
  student   User   @relation(fields: [studentId], references: [id])
  courseId  String
  course    Course @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
  @@map("enrollments")
}

// Assignment model for course assignments
model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  maxScore    Float
  dueDate     DateTime?
  type        String?  // HOMEWORK, QUIZ, EXAM, etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  courseId String
  course   Course @relation(fields: [courseId], references: [id])
  moduleId String?
  module   Module? @relation(fields: [moduleId], references: [id])
  submissions Submission[]
  assignmentGrades AssignmentGrade[]

  @@map("assignments")
}

// Submission model for student assignments
model Submission {
  id          String   @id @default(cuid())
  content     String   // Submission content (text, file path, etc.)
  score       Float?   // Grade given by teacher
  feedback    String?  // Teacher feedback
  submittedAt DateTime @default(now())
  gradedAt    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  studentId String
  student   User @relation(fields: [studentId], references: [id])
  assignmentId String
  assignment Assignment @relation(fields: [assignmentId], references: [id])
  assignmentGrade AssignmentGrade?

  @@unique([studentId, assignmentId])
  @@map("submissions")
}

// Course Grade model for overall course performance
model CourseGrade {
  id          String   @id @default(cuid())
  letterGrade String   // A, B, C, D, F
  percentage  Float    // 0.0 to 100.0
  comments    String?  // Teacher/admin comments
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  studentId String
  student   User   @relation(fields: [studentId], references: [id])
  courseId  String
  course    Course @relation(fields: [courseId], references: [id])

  @@unique([studentId, courseId])
  @@map("course_grades")
}

// Assignment Grade model for individual assignment scores
model AssignmentGrade {
  id          String   @id @default(cuid())
  score       Float    // Actual score earned
  maxScore    Float    // Maximum possible score
  percentage  Float    // Calculated percentage
  feedback    String?  // Teacher/admin feedback
  gradedBy    String   // Teacher/admin ID who graded it
  gradedAt    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id])
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      User      @relation(fields: [studentId], references: [id])
  courseId     String
  course       Course    @relation(fields: [courseId], references: [id])

  @@unique([submissionId])
  @@map("assignment_grades")
}


